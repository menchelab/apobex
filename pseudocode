Bootstrapping procedure for background correction

1. Down-scale mutation counts:
   - Find the minimum mutation count across all samples.
   - Scale each sample's mutation count relative to this minimum count.

Pseudocode:

function scale_matrix(mat):
    col_sums = sum of each column in mat
    min_col_sum = smallest value in col_sums

    for each column in mat:
        if column sum is not equal to min_col_sum:
            scaling_factor = min_col_sum / column sum
            scale column by scaling_factor and round values

    return scaled_matrix


2. Generate bootstrap samples:
   - For each sample, create 10,000 bootstrap samples using weighted random sampling based on the mutation counts across 96 features.
   - Collect a total of 30,000 bootstrap samples.

Pseudocode:

function boostrap(input_hash, seed = null):

create hash of matrices

result_hash = empty hash

for each matrix in hash:

    function bootstrap_iteration(genomes, seed = null):
        if seed is not null:
            set the random seed to seed

        genome_col_sums = sum of each column in genomes
        normalization_matrix = matrix with genome_col_sums repeated for each row of genomes
        norm_genomes = genomes divided by normalization_matrix (element-wise)

        bootstrap_result = empty list

        for each column i in genomes:
            tmp = norm_genomes[, i]
            tmp = multinomial random sample with size genome_col_sums[i] and probabilities tmp
            append tmp to bootstrap_result

        bootstrap_result = combine all columns in bootstrap_result into a matrix
        return bootstrap_result

        append bootstrap result to result_hash

return result_hash



3. Compute the average mutation count:
   - Calculate the mean mutation count for each of the 96 features from the 30,000 bootstrap samples.
   - This gives the average background mutation profile.


Pseudocode:

function average_bootstrapped_samples(hash_of_bootstrap_results):
    averaged_samples_hash = empty hash

    for each key i in hash_of_bootstrap_results:
        averaged_samples_hash[i] = average of each row in hash_of_bootstrap_results[i]

    return averaged_samples_hash

function hash_to_matrix(averaged_samples_hash):
    tmp_df = empty DataFrame

    for each key i in averaged_samples_hash:
        for each subkey j in averaged_samples_hash[i]:
            tmp_df = append column averaged_samples_hash[i][j] to tmp_df

    bootstrapped_matrix = convert tmp_df to matrix

    return bootstrapped_matrix



4. Adjust the original mutation matrix:
   - Subtract the average background mutation profile from each sample's mutation count matrix.
   - Ensure that no values go below 0 after subtraction.

Pseudocode:

function background_correction(mutation_matrix_rescaled, bootstrapped_background):
    mutation_matrix_corrected = mutation_matrix_rescaled - bootstrapped_background
     mutation_matrix_corrected = element-wise maximum of mutation_matrix_corrected and 0

    return  mutation_matrix_corrected
